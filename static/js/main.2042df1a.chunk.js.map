{"version":3,"sources":["components/Search.tsx","components/HomeView.tsx","components/RecipeView.tsx","modules.ts","utilities.ts","App.tsx","index.tsx"],"names":["Tag","props","className","name","onClick","removeTag","icon","close","Search","useState","suggestions","setsuggestions","searchVal","setsearchVal","ingrJSON","require","ingredients","key","push","toLowerCase","taste","abv","tag","newTags","tags","splice","indexOf","onTagsChange","handleInputChange","inVal","val","trim","Set","ingredient","slice","length","add","includes","Array","from","autoFocus","value","placeholder","onChange","event","target","map","concat","HomeView","recipeTiles","recipes","recipe","summary","garnish","to","replace","index","RecipeView","ingredientElems","path","useLocation","pathname","split","recipeKey","get","amount","unit","category","preparation","Ingredient","obj","special","usedUnit","filter","this","label","Recipe","glass","loadRecipes","recipesJSON","recipesShuffled","array","i","j","Math","floor","random","temp","fisherYatesShuffle","recipeMap","Map","withRouter","keywordMap","keywords","mapVal","set","generateKeywordMap","setTags","searchResult","setsearchResult","handleSearch","intags","undefined","results","word","keyResult","resultRecipe","priority","sortedResult","values","sort","a","b","useEffect","urltags","location","search","JSON","parse","decodeURIComponent","history","encodeURIComponent","stringify","href","rel","style","marginTop","hashHistory","createHashHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2042df1a.chunk.js","sourcesContent":["import close from \"@iconify/icons-mdi/close-circle\";\nimport { Icon } from \"@iconify/react\";\nimport React, { useState } from \"react\";\nimport { IngredientData } from \"../modules\";\nimport \"./Search.css\";\n\nfunction Tag(props: { name: string; removeTag: (name: string) => void }) {\n    return (\n        <span className=\"tag\">\n            {props.name}{\" \"}\n            <span\n                className=\"tagClose\"\n                onClick={() => props.removeTag(props.name)}\n            >\n                <Icon icon={close} />\n            </span>\n        </span>\n    );\n}\n\ninterface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nfunction Search(props: Props) {\n    const [suggestions, setsuggestions] = useState<string[]>([]);\n    const [searchVal, setsearchVal] = useState<string>(\"\");\n\n    // list of ingredients used for auto-complete\n    const ingrJSON = require(\"../data/ingredients.json\");\n    const ingredients: IngredientData[] = [];\n    for (const key in ingrJSON) {\n        ingredients.push({\n            name: key.toLowerCase(),\n            taste: ingrJSON[key].taste,\n            abv: ingrJSON[key].abv\n        });\n    }\n\n    function removeTag(tag: string) {\n        // we use [...props.tags] so it makes a new array and\n        // the setState on the other end recognises this\n        const newTags = [...props.tags];\n        newTags.splice(props.tags.indexOf(tag), 1);\n        props.onTagsChange(newTags);\n    }\n\n    function handleInputChange(inVal: string) {\n        setsearchVal(inVal);\n        // props.onSearch(inVal);\n        const val = inVal.trim().toLowerCase();\n        if (val === \"\") {\n            setsuggestions([]);\n        } else {\n            const suggestions: Set<string> = new Set();\n            // first check for complete matches\n            for (const ingredient of ingredients) {\n                if (ingredient.name.slice(0, val.length) === val) {\n                    suggestions.add(ingredient.name);\n                }\n            }\n            // now check for partial matches\n            for (const ingredient of ingredients) {\n                if (ingredient.name.includes(val)) {\n                    suggestions.add(ingredient.name);\n                }\n            }\n            setsuggestions(Array.from(suggestions));\n        }\n    }\n\n    return (\n        <span className=\"inputContainer\">\n            <input\n                autoFocus\n                value={searchVal}\n                placeholder=\"I have some...\"\n                onChange={event => handleInputChange(event.target.value)}\n            />\n            {searchVal ? (\n                <span onClick={() => handleInputChange(\"\")}>\n                    <Icon className=\"closeIcon\" icon={close} />\n                </span>\n            ) : (\n                <span />\n            )}\n            {suggestions.length > 0 ? (\n                <div className=\"searchDropDown\">\n                    <ul>\n                        {suggestions.map(val => (\n                            <li\n                                onClick={() => {\n                                    props.onTagsChange(\n                                        props.tags.concat([val])\n                                    );\n                                    handleInputChange(\"\");\n                                }}\n                                key={val}\n                            >\n                                {val}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            ) : (\n                <span />\n            )}\n\n            <div className=\"tags\">\n                {props.tags.map(val => (\n                    <Tag name={val} key={val} removeTag={removeTag} />\n                ))}\n            </div>\n        </span>\n    );\n}\n\nexport default Search;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Recipe } from \"../modules\";\nimport \"./HomeView.css\";\nimport Search from \"./Search\";\n\ninterface Props {\n    recipes: Recipe[];\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function HomeView(props: Props) {\n    const recipeTiles: JSX.Element[] = [];\n    for (const recipe of props.recipes) {\n        let summary: string[] = recipe.ingredients.map(val => val.name);\n        summary = summary.concat(recipe.garnish).slice(0, 2);\n\n        recipeTiles.push(\n            <Link\n                to={`/drink/${recipe.name.replace(/ /g, \"_\")}`}\n                key={recipe.name}\n            >\n                <div className=\"recipeTile\">\n                    <h3>{recipe.name}</h3>\n                    <ul>\n                        {summary.map((val, index) => (\n                            <li key={index}>{val}</li>\n                        ))}\n                        <li className=\"ellipse\" key={3}>\n                            ...\n                        </li>\n                    </ul>\n                </div>\n            </Link>\n        );\n    }\n    return (\n        <span>\n            <div className=\"bgImage\">\n                <div className=\"logo\">What to Drink</div>\n                <Search tags={props.tags} onTagsChange={props.onTagsChange} />\n            </div>\n            <div className=\"recipeList\">{recipeTiles}</div>\n        </span>\n    );\n}\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Recipe } from \"../modules\";\nimport \"./RecipeView.css\";\n\ninterface Props {\n    recipes: Map<string, Recipe>;\n}\n\nfunction RecipeView(props: Props) {\n    const ingredientElems = [];\n    const path = useLocation().pathname.split(\"/\");\n    const recipeKey = path[path.length - 1];\n    const recipe = props.recipes.get(recipeKey);\n\n    if (recipe) {\n        for (const val of recipe.ingredients) {\n            ingredientElems.push(\n                <span>\n                    {val.amount}&nbsp;\n                    {val.unit}&nbsp;\n                    {val.ingredient}\n                </span>\n            );\n        }\n        return (\n            <div className=\"Recipe\">\n                <h2>{recipe.name}</h2>\n                <em>{recipe.category}</em>\n                <h3>Ingredients</h3>\n                <ul>\n                    {ingredientElems.map((val, index) => (\n                        <li key={index}>{val}</li>\n                    ))}\n                </ul>\n                <h3>Preparation</h3>\n                <p>{recipe.preparation}</p>\n                {recipe.garnish ? (\n                    <p>Garnish with a {recipe.garnish}</p>\n                ) : (\n                    <span />\n                )}\n            </div>\n        );\n    } else {\n        return <span>404 could not find recipe {recipeKey}</span>;\n    }\n}\n\nexport default RecipeView;\n","export interface IngredientData {\n    name: string;\n    taste: string;\n    abv: number;\n}\n\nexport class Ingredient {\n    name: string;\n    amount: string;\n    unit: string;\n    ingredient: string;\n\n    constructor(obj: any) {\n        if (obj.special) {\n            const special: string = obj.special;\n            const knownUnits = [\n                \"dashes\",\n                \"dash\",\n                \"drops\",\n                \"drop\",\n                \"teaspoon\",\n                \"teaspoons\",\n                \"bar spoon\",\n                \"bar spoons\"\n            ];\n            // First split by unit to get the amount\n            const usedUnit = knownUnits.filter(val => special.includes(val))[0];\n            let [amount, name] = special.split(usedUnit).map(val => val.trim());\n            this.amount = amount;\n            this.unit = usedUnit;\n            this.ingredient = name;\n            this.name = name ? name : special;\n        } else {\n            if (obj.label) {\n                this.name = obj.label;\n            } else {\n                this.name = obj.ingredient;\n            }\n            this.amount = obj.amount;\n            this.unit = obj.unit;\n            this.ingredient = obj.ingredient;\n        }\n    }\n}\n\nexport class Recipe {\n    name: string;\n    key: string;\n    category: string;\n    ingredients: Array<Ingredient>;\n    preparation: string;\n    garnish: string;\n    glass: string;\n\n    constructor(obj: any) {\n        this.name = obj.name;\n        this.key = obj.name.replace(/ /g, \"_\");\n        this.category = obj.category;\n        this.ingredients = obj.ingredients.map(\n            (val: any) => new Ingredient(val)\n        );\n        this.preparation = obj.preparation;\n        this.garnish = obj.garnish;\n        this.glass = obj.glass;\n    }\n}\n","import { Recipe } from \"./modules\";\n\nexport function loadRecipes(): [Recipe[], Map<string, Recipe>] {\n    const recipesJSON = require(\"./data/recipes.json\");\n    const recipes = Array.from(recipesJSON as any).map(val => new Recipe(val));\n    const recipesShuffled = fisherYatesShuffle(recipes);\n    const recipeMap = new Map(recipesShuffled.map(val => [val.key, val]));\n    return [recipesShuffled, recipeMap];\n}\n\nexport function generateKeywordMap(recipes: Recipe[]): Map<string, Recipe[]> {\n    // Map of keywords => recipes for searching\n    const keywordMap = new Map<string, Recipe[]>();\n    for (const recipe of recipes) {\n        let keywords: string[] = recipe.ingredients.map(val => val.name);\n        keywords = keywords.concat(recipe.name.split(\" \"));\n        keywords = keywords.concat(\n            recipe.garnish ? recipe.garnish.split(\" \") : []\n        );\n        keywords = keywords.map(val => val.toLowerCase().replace(/\\s/g, \"\"));\n\n        for (const key of keywords) {\n            const mapVal = keywordMap.get(key);\n            if (mapVal) {\n                keywordMap.set(key, mapVal.concat(recipe));\n            } else {\n                keywordMap.set(key, [recipe]);\n            }\n        }\n    }\n    return keywordMap;\n}\n\nexport function fisherYatesShuffle(array: any[]): any[] {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link, Route, Switch, withRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport HomeView from \"./components/HomeView\";\nimport RecipeView from \"./components/RecipeView\";\nimport { Recipe } from \"./modules\";\nimport { generateKeywordMap, loadRecipes } from \"./utilities\";\n\nfunction App(props: any) {\n    const [recipes, recipeMap] = loadRecipes();\n    const keywordMap = generateKeywordMap(recipes);\n    const [tags, setTags] = useState<string[]>([]);\n    const [searchResult, setsearchResult] = useState<Recipe[]>([]);\n\n    useEffect(() => {\n        let urltags = [];\n        if (props.location && props.location.search) {\n            urltags = JSON.parse(\n                decodeURIComponent(props.location.search).replace(\n                    \"?search=\",\n                    \"\"\n                )\n            );\n        }\n        setTags(urltags);\n        handleSearch(urltags);\n    }, []);\n\n    useEffect(() => {\n        props.history.replace(\n            \"?search=\" + encodeURIComponent(JSON.stringify(tags))\n        );\n        handleSearch(tags);\n    }, [tags]);\n\n    function handleSearch(intags: string[]) {\n        // preprocessing\n        let tags = intags.filter(val => val.trim() !== \"\");\n        tags = tags.filter(val => val !== undefined && val !== null);\n        if (tags.length < 1) {\n            setsearchResult([]);\n        } else {\n            let results: Map<\n                string,\n                { recipe: Recipe; priority: number }\n            > = new Map();\n\n            for (const word of tags) {\n                if (word.trim() !== \"\") {\n                    let keyResult: Recipe[] = [];\n                    for (const [key, value] of Array.from(keywordMap)) {\n                        if (key.includes(word)) {\n                            keyResult = keyResult.concat(value);\n                        }\n                    }\n                    if (keyResult) {\n                        for (const recipe of keyResult) {\n                            const resultRecipe = results.get(recipe.key);\n                            if (resultRecipe) {\n                                resultRecipe.priority += 1;\n                            } else {\n                                results.set(recipe.key, {\n                                    recipe: recipe,\n                                    priority: 1\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n\n            const resultArray = Array.from(results.values());\n\n            // sort the results by priority\n            const sortedResult = resultArray.sort(\n                (a, b) => b.priority - a.priority\n            );\n\n            setsearchResult(sortedResult.map(val => val.recipe));\n        }\n    }\n\n    // =========================  Rendering  ========================= //\n    return (\n        <div className=\"App\">\n            <span className=\"appBody\">\n                <Switch>\n                    <Route path=\"/drink/\">\n                        <RecipeView recipes={recipeMap} />\n                    </Route>\n                    <Route path=\"/\">\n                        <HomeView\n                            tags={tags}\n                            onTagsChange={val => setTags(val)}\n                            recipes={\n                                searchResult.length > 0 ? searchResult : recipes\n                            }\n                        />\n                    </Route>\n                </Switch>\n            </span>\n\n            <footer>\n                <div className=\"footerContainer\">\n                    <Link to=\"/\" className=\"logo\">\n                        What to Drink\n                    </Link>\n                    <div>\n                        &#169;{\" \"}\n                        <a\n                            href=\"https://henry.nz\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Henry Seed\n                        </a>{\" \"}\n                        2020\n                    </div>\n                    <div style={{ marginTop: \"10px\" }}>\n                        <a\n                            href=\"https://github.com/HenrySeed/What-to-Drink\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Github\n                        </a>\n                    </div>\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","import { createHashHistory } from \"history\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst hashHistory = createHashHistory();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router history={hashHistory}>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}