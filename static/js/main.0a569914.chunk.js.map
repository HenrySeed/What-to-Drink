{"version":3,"sources":["components/Search.tsx","components/HomeView.tsx","components/RecipeView.tsx","modules.ts","utilities.ts","App.tsx","index.tsx"],"names":["Tag","props","className","onClick","action","name","icon","tagIcon","Search","useState","suggestions","setsuggestions","searchVal","setsearchVal","ingrJSON","require","ingredients","key","push","toLowerCase","taste","abv","removeTag","tag","newTags","tags","splice","indexOf","onTagsChange","handleInputChange","inVal","val","trim","Set","possibleIngr","filter","includes","ingredient","slice","length","add","Array","from","autoFocus","value","placeholder","onChange","event","target","close","map","concat","HomeView","recipeTiles","recipes","recipe","summary","garnish","to","replace","index","RecipeView","ingredientElems","path","useLocation","pathname","split","recipeKey","get","amount","unit","category","preparation","Ingredient","obj","special","usedUnit","this","label","Recipe","glass","getSearchedRecipes","intags","keywordMap","undefined","results","Map","word","keyResult","resultRecipe","priority","set","values","sort","a","b","recipesJSON","recipesShuffled","array","i","j","Math","floor","random","temp","fisherYatesShuffle","recipeMap","loadRecipes","keywords","mapVal","generateKeywordMap","withRouter","setTags","searchResult","setsearchResult","useEffect","urltags","location","search","JSON","parse","decodeURIComponent","history","encodeURIComponent","stringify","href","rel","style","marginTop","hashHistory","createHashHistory","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a569914.chunk.js","sourcesContent":["import add from \"@iconify/icons-mdi/add\";\nimport close from \"@iconify/icons-mdi/close-circle\";\nimport { Icon } from \"@iconify/react\";\nimport React, { useState } from \"react\";\nimport { IngredientData } from \"../modules\";\nimport \"./Search.css\";\n\ninterface TagProps {\n    name: string;\n    action: (name: string) => void;\n    tagIcon: any;\n}\nfunction Tag(props: TagProps) {\n    return (\n        <span className=\"tag\" onClick={() => props.action(props.name)}>\n            {props.name}\n            <Icon icon={props.tagIcon} className=\"tagClose\" />\n        </span>\n    );\n}\n\ninterface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nfunction Search(props: Props) {\n    const [suggestions, setsuggestions] = useState<string[]>([]);\n    const [searchVal, setsearchVal] = useState<string>(\"\");\n\n    // list of ingredients used for auto-complete\n    const ingrJSON = require(\"../data/ingredients.json\");\n    const ingredients: IngredientData[] = [];\n    for (const key in ingrJSON) {\n        ingredients.push({\n            name: key.toLowerCase(),\n            taste: ingrJSON[key].taste,\n            abv: ingrJSON[key].abv\n        });\n    }\n\n    function removeTag(tag: string) {\n        // we use [...props.tags] so it makes a new array and\n        // the setState on the other end recognises this\n        const newTags = [...props.tags];\n        newTags.splice(props.tags.indexOf(tag), 1);\n        props.onTagsChange(newTags);\n    }\n\n    function handleInputChange(inVal: string) {\n        setsearchVal(inVal);\n        // props.onSearch(inVal);\n        const val = inVal.trim().toLowerCase();\n        if (val === \"\") {\n            setsuggestions([]);\n        } else {\n            const suggestions: Set<string> = new Set();\n            const possibleIngr = ingredients.filter(\n                val => !props.tags.includes(val.name)\n            );\n            // first check for complete matches\n            for (const ingredient of possibleIngr) {\n                if (ingredient.name.slice(0, val.length) === val) {\n                    suggestions.add(ingredient.name);\n                }\n            }\n            // now check for partial matches\n            for (const ingredient of possibleIngr) {\n                if (ingredient.name.includes(val)) {\n                    suggestions.add(ingredient.name);\n                }\n            }\n            setsuggestions(Array.from(suggestions));\n        }\n    }\n\n    return (\n        <span>\n            <span className=\"inputanchor\">\n                <div className=\"inputContainer\">\n                    <input\n                        autoFocus\n                        value={searchVal}\n                        placeholder=\"I have some...\"\n                        onChange={event =>\n                            handleInputChange(event.target.value)\n                        }\n                    />\n                    {searchVal ? (\n                        <span\n                            className=\"closeIcon\"\n                            onClick={() => handleInputChange(\"\")}\n                        >\n                            <Icon icon={close} />\n                        </span>\n                    ) : (\n                        <span />\n                    )}\n                    {suggestions.length > 0 ? (\n                        <div className=\"searchDropDown\">\n                            <ul>\n                                {suggestions.map(val => (\n                                    <Tag\n                                        name={val}\n                                        key={val}\n                                        action={name => {\n                                            props.onTagsChange(\n                                                props.tags.concat([val])\n                                            );\n                                            handleInputChange(\"\");\n                                        }}\n                                        tagIcon={add}\n                                    />\n                                ))}\n                            </ul>\n                        </div>\n                    ) : (\n                        <span />\n                    )}\n                </div>\n            </span>\n\n            {props.tags.length > 0 ? (\n                <div className=\"tags\">\n                    {props.tags.map(val => (\n                        <Tag\n                            name={val}\n                            key={val}\n                            action={removeTag}\n                            tagIcon={close}\n                        />\n                    ))}\n                </div>\n            ) : (\n                <span />\n            )}\n        </span>\n    );\n}\n\nexport default Search;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Recipe } from \"../modules\";\nimport \"./HomeView.css\";\nimport Search from \"./Search\";\n\ninterface Props {\n    recipes: Recipe[];\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function HomeView(props: Props) {\n    const recipeTiles: JSX.Element[] = [];\n    for (const recipe of props.recipes) {\n        let summary: string[] = recipe.ingredients.map(val => val.name);\n        summary = summary.concat(recipe.garnish).slice(0, 2);\n\n        recipeTiles.push(\n            <Link\n                to={`/drink/${recipe.name.replace(/ /g, \"_\")}`}\n                key={recipe.name}\n            >\n                <div className=\"recipeTile\">\n                    <h3>{recipe.name}</h3>\n                    <ul>\n                        {summary.map((val, index) => (\n                            <li key={index}>{val}</li>\n                        ))}\n                        <li className=\"ellipse\" key={3}>\n                            ...\n                        </li>\n                    </ul>\n                </div>\n            </Link>\n        );\n    }\n    return (\n        <span>\n            <div className=\"bgImage\">\n                <div className=\"logo\">What to Drink</div>\n                <Search tags={props.tags} onTagsChange={props.onTagsChange} />\n            </div>\n            <div className=\"recipeList\">{recipeTiles}</div>\n        </span>\n    );\n}\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Recipe } from \"../modules\";\nimport \"./RecipeView.css\";\n\ninterface Props {\n    recipes: Map<string, Recipe>;\n}\n\nfunction RecipeView(props: Props) {\n    const ingredientElems = [];\n    const path = useLocation().pathname.split(\"/\");\n    const recipeKey = path[path.length - 1];\n    const recipe = props.recipes.get(recipeKey);\n\n    if (recipe) {\n        for (const val of recipe.ingredients) {\n            ingredientElems.push(\n                <span>\n                    {val.amount}&nbsp;\n                    {val.unit}&nbsp;\n                    {val.ingredient}\n                </span>\n            );\n        }\n        return (\n            <div className=\"Recipe\">\n                <h2>{recipe.name}</h2>\n                <em>{recipe.category}</em>\n                <h3>Ingredients</h3>\n                <ul>\n                    {ingredientElems.map((val, index) => (\n                        <li key={index}>{val}</li>\n                    ))}\n                </ul>\n                <h3>Preparation</h3>\n                <p>{recipe.preparation}</p>\n                {recipe.garnish ? (\n                    <p>Garnish with a {recipe.garnish}</p>\n                ) : (\n                    <span />\n                )}\n            </div>\n        );\n    } else {\n        return <span>404 could not find recipe {recipeKey}</span>;\n    }\n}\n\nexport default RecipeView;\n","export interface IngredientData {\n    name: string;\n    taste: string;\n    abv: number;\n}\n\nexport class Ingredient {\n    name: string;\n    amount: string;\n    unit: string;\n    ingredient: string;\n\n    constructor(obj: any) {\n        if (obj.special) {\n            const special: string = obj.special;\n            const knownUnits = [\n                \"dashes\",\n                \"dash\",\n                \"drops\",\n                \"drop\",\n                \"teaspoon\",\n                \"teaspoons\",\n                \"bar spoon\",\n                \"bar spoons\"\n            ];\n            // First split by unit to get the amount\n            const usedUnit = knownUnits.filter(val => special.includes(val))[0];\n            let [amount, name] = special.split(usedUnit).map(val => val.trim());\n            this.amount = amount;\n            this.unit = usedUnit;\n            this.ingredient = name;\n            this.name = name ? name : special;\n        } else {\n            if (obj.label) {\n                this.name = obj.label;\n            } else {\n                this.name = obj.ingredient;\n            }\n            this.amount = obj.amount;\n            this.unit = obj.unit;\n            this.ingredient = obj.ingredient;\n        }\n    }\n}\n\nexport class Recipe {\n    name: string;\n    key: string;\n    category: string;\n    ingredients: Array<Ingredient>;\n    preparation: string;\n    garnish: string;\n    glass: string;\n\n    constructor(obj: any) {\n        this.name = obj.name;\n        this.key = obj.name.replace(/ /g, \"_\");\n        this.category = obj.category;\n        this.ingredients = obj.ingredients.map(\n            (val: any) => new Ingredient(val)\n        );\n        this.preparation = obj.preparation;\n        this.garnish = obj.garnish;\n        this.glass = obj.glass;\n    }\n}\n","import { Recipe } from \"./modules\";\n\nexport function getSearchedRecipes(\n    intags: string[],\n    keywordMap: Map<string, Recipe[]>\n): Recipe[] {\n    // preprocessing\n    let tags = intags.filter(val => val.trim() !== \"\");\n    tags = tags.filter(val => val !== undefined && val !== null);\n    if (tags.length < 1) {\n        return [];\n    } else {\n        let results: Map<\n            string,\n            { recipe: Recipe; priority: number }\n        > = new Map();\n\n        for (const word of tags) {\n            if (word.trim() !== \"\") {\n                let keyResult: Recipe[] = [];\n                for (const [key, value] of Array.from(keywordMap)) {\n                    if (key.includes(word)) {\n                        keyResult = keyResult.concat(value);\n                    }\n                }\n                if (keyResult) {\n                    for (const recipe of keyResult) {\n                        const resultRecipe = results.get(recipe.key);\n                        if (resultRecipe) {\n                            resultRecipe.priority += 1;\n                        } else {\n                            results.set(recipe.key, {\n                                recipe: recipe,\n                                priority: 1\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        const resultArray = Array.from(results.values());\n\n        // sort the results by priority\n        const sortedResult = resultArray.sort(\n            (a, b) => b.priority - a.priority\n        );\n\n        return sortedResult.map(val => val.recipe);\n    }\n}\n\nexport function loadRecipes(): [Recipe[], Map<string, Recipe>] {\n    const recipesJSON = require(\"./data/recipes.json\");\n    const recipes = Array.from(recipesJSON as any).map(val => new Recipe(val));\n    const recipesShuffled = fisherYatesShuffle(recipes);\n    const recipeMap = new Map(recipesShuffled.map(val => [val.key, val]));\n    return [recipesShuffled, recipeMap];\n}\n\nexport function generateKeywordMap(recipes: Recipe[]): Map<string, Recipe[]> {\n    // Map of keywords => recipes for searching\n    const keywordMap = new Map<string, Recipe[]>();\n    for (const recipe of recipes) {\n        let keywords: string[] = recipe.ingredients.map(val => val.name);\n        keywords = keywords.concat(recipe.name.split(\" \"));\n        keywords = keywords.concat(\n            recipe.garnish ? recipe.garnish.split(\" \") : []\n        );\n        keywords = keywords.map(val => val.toLowerCase().replace(/\\s/g, \"\"));\n\n        for (const key of keywords) {\n            const mapVal = keywordMap.get(key);\n            if (mapVal) {\n                keywordMap.set(key, mapVal.concat(recipe));\n            } else {\n                keywordMap.set(key, [recipe]);\n            }\n        }\n    }\n    return keywordMap;\n}\n\nexport function fisherYatesShuffle(array: any[]): any[] {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link, Route, Switch, withRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport HomeView from \"./components/HomeView\";\nimport RecipeView from \"./components/RecipeView\";\nimport { Recipe } from \"./modules\";\nimport {\n    generateKeywordMap,\n    getSearchedRecipes,\n    loadRecipes\n} from \"./utilities\";\n\nconst [recipes, recipeMap] = loadRecipes();\nconst keywordMap = generateKeywordMap(recipes);\n\nfunction App(props: any) {\n    const [tags, setTags] = useState<string[]>([]);\n    const [searchResult, setsearchResult] = useState<Recipe[]>([]);\n\n    useEffect(() => {\n        let urltags = [];\n        if (props.location && props.location.search) {\n            urltags = JSON.parse(\n                decodeURIComponent(props.location.search).replace(\n                    \"?search=\",\n                    \"\"\n                )\n            );\n        }\n        setTags(urltags);\n        setsearchResult(getSearchedRecipes(urltags, keywordMap));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    useEffect(() => {\n        props.history.replace(\n            \"?search=\" + encodeURIComponent(JSON.stringify(tags))\n        );\n        setsearchResult(getSearchedRecipes(tags, keywordMap));\n    }, [tags]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // =========================  Rendering  ========================= //\n    return (\n        <div className=\"App\">\n            <span className=\"appBody\">\n                <Switch>\n                    <Route path=\"/drink/\">\n                        <RecipeView recipes={recipeMap} />\n                    </Route>\n                    <Route path=\"/\">\n                        <HomeView\n                            tags={tags}\n                            onTagsChange={val => setTags(val)}\n                            recipes={\n                                searchResult.length > 0 ? searchResult : recipes\n                            }\n                        />\n                    </Route>\n                </Switch>\n            </span>\n\n            <footer>\n                <div className=\"footerContainer\">\n                    <Link to=\"/\" className=\"logo\">\n                        What to Drink\n                    </Link>\n                    <div>\n                        &#169;{\" \"}\n                        <a\n                            href=\"https://henry.nz\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Henry Seed\n                        </a>{\" \"}\n                        2020\n                    </div>\n                    <div style={{ marginTop: \"10px\" }}>\n                        <a\n                            href=\"https://github.com/HenrySeed/What-to-Drink\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Github\n                        </a>\n                    </div>\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","import { createHashHistory } from \"history\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst hashHistory = createHashHistory();\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router history={hashHistory}>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}